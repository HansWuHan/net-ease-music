'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _ListViewDataSource = require('./ListViewDataSource');

var _ListViewDataSource2 = _interopRequireDefault(_ListViewDataSource);

var _ScrollView = require('./ScrollView');

var _ScrollView2 = _interopRequireDefault(_ScrollView);

var _reactSticky = require('react-sticky');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint no-unused-vars: 0, react/no-multi-comp: 0
react/prop-types: 0, react/sort-comp: 0, no-unused-expressions: 0 */
var DEFAULT_PAGE_SIZE = 1;
var DEFAULT_INITIAL_ROWS = 10;
var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
var DEFAULT_END_REACHED_THRESHOLD = 1000;
var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
var SCROLLVIEW_REF = 'listviewscroll';

var StaticRenderer = function (_React$Component) {
  (0, _inherits3['default'])(StaticRenderer, _React$Component);

  function StaticRenderer() {
    (0, _classCallCheck3['default'])(this, StaticRenderer);
    return (0, _possibleConstructorReturn3['default'])(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
  }

  (0, _createClass3['default'])(StaticRenderer, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.shouldUpdate;
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.render();
    }
  }]);
  return StaticRenderer;
}(_react2['default'].Component);
// https://github.com/facebook/react-native/blob/0.26-stable/Libraries/CustomComponents/ListView/ListView.js


var ListView = function (_React$Component2) {
  (0, _inherits3['default'])(ListView, _React$Component2);

  function ListView() {
    var _ref;

    var _temp, _this2, _ret;

    (0, _classCallCheck3['default'])(this, ListView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this2 = (0, _possibleConstructorReturn3['default'])(this, (_ref = ListView.__proto__ || Object.getPrototypeOf(ListView)).call.apply(_ref, [this].concat(args))), _this2), _initialiseProps.call(_this2), _temp), (0, _possibleConstructorReturn3['default'])(_this2, _ret);
  }

  /**
   * Exports some data, e.g. for perf investigations or analytics.
   */


  (0, _createClass3['default'])(ListView, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      // this data should never trigger a render pass, so don't put in state
      this.scrollProperties = {
        visibleLength: null,
        contentLength: null,
        offset: 0
      };
      this._childFrames = [];
      this._visibleRows = {};
      this._prevRenderedRowsCount = 0;
      this._sentEndForContentLength = null;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this3 = this;

      if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
        this.setState(function (state, props) {
          _this3._prevRenderedRowsCount = 0;
          return {
            curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, nextProps.initialListSize // for preact
            ), nextProps.dataSource.getRowCount() // for preact
            )
          };
        }, function () {
          return _this3._renderMoreRowsIfNeeded();
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var bodyComponents = [];

      var dataSource = this.props.dataSource;
      var allRowIDs = dataSource.rowIdentities;
      var rowCount = 0;
      var sectionHeaderIndices = [];

      var header = this.props.renderHeader && this.props.renderHeader();
      var footer = this.props.renderFooter && this.props.renderFooter();
      var totalIndex = header ? 1 : 0;

      var _loop = function _loop(sectionIdx) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];
        if (rowIDs.length === 0) {
          return 'continue';
        }

        if (_this4.props.renderSectionHeader) {
          var shouldUpdateHeader = rowCount >= _this4._prevRenderedRowsCount && dataSource.sectionHeaderShouldUpdate(sectionIdx);

          var renderSectionHeader = _react2['default'].createElement(StaticRenderer, {
            key: 's_' + sectionID,
            shouldUpdate: !!shouldUpdateHeader,
            render: _this4.props.renderSectionHeader.bind(null, dataSource.getSectionHeaderData(sectionIdx), sectionID)
          });
          if (_this4.props.stickyHeader) {
            renderSectionHeader = _react2['default'].createElement(
              _reactSticky.Sticky,
              (0, _extends3['default'])({}, _this4.props.stickyProps, { key: 's_' + sectionID,
                ref: function ref(c) {
                  _this4.stickyRefs[sectionID] = c;
                }
              }),
              renderSectionHeader
            );
          }
          bodyComponents.push(renderSectionHeader);
          sectionHeaderIndices.push(totalIndex++);
        }

        var sectionBody = [];
        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var comboID = sectionID + '_' + rowID;
          var shouldUpdateRow = rowCount >= _this4._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
          var row = _react2['default'].createElement(StaticRenderer, {
            key: 'r_' + comboID,
            shouldUpdate: !!shouldUpdateRow,
            render: _this4.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, _this4.onRowHighlighted)
          });
          // bodyComponents.push(row);
          sectionBody.push(row);
          totalIndex++;

          if (_this4.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            var adjacentRowHighlighted = _this4.state.highlightedRow.sectionID === sectionID && (_this4.state.highlightedRow.rowID === rowID || _this4.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
            var separator = _this4.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);
            if (separator) {
              // bodyComponents.push(separator);
              sectionBody.push(separator);
              totalIndex++;
            }
          }
          if (++rowCount === _this4.state.curRenderedRowsCount) {
            break;
          }
        }
        bodyComponents.push(_react2['default'].cloneElement(_this4.props.renderSectionBodyWrapper(sectionID), {
          className: _this4.props.sectionBodyClassName
        }, sectionBody));
        if (rowCount >= _this4.state.curRenderedRowsCount) {
          return 'break';
        }
      };

      _loop2: for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var _ret2 = _loop(sectionIdx);

        switch (_ret2) {
          case 'continue':
            continue;

          case 'break':
            break _loop2;}
      }

      var _props = this.props,
          renderScrollComponent = _props.renderScrollComponent,
          props = (0, _objectWithoutProperties3['default'])(_props, ['renderScrollComponent']);


      bodyComponents = _react2['default'].cloneElement(props.renderBodyComponent(), {}, bodyComponents);
      if (props.stickyHeader) {
        bodyComponents = _react2['default'].createElement(
          _reactSticky.StickyContainer,
          props.stickyContainerProps,
          bodyComponents
        );
      }

      this._sc = _react2['default'].cloneElement(renderScrollComponent((0, _extends3['default'])({}, props, { onScroll: this._onScroll })), {
        ref: SCROLLVIEW_REF,
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout
      }, header, bodyComponents, footer, props.children);
      return this._sc;
    }
  }, {
    key: 'componentDidMount',


    /**
     The following code was originally intended to implement the pull-up-refresh feature,
     but not need to do it.
      Coincidentally, it solves a problem, if the content is not high enough,
     the `onScroll` and `onEndReached` event will not be fired.
     However, there should be a better solution for this issue.
     */
    value: function componentDidMount() {
      this.bindEvt();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unBindEvt();
    }
  }]);
  return ListView;
}(_react2['default'].Component);

ListView.DataSource = _ListViewDataSource2['default'];
ListView.propTypes = (0, _extends3['default'])({}, _ScrollView2['default'].propTypes, {
  dataSource: _propTypes2['default'].instanceOf(_ListViewDataSource2['default']).isRequired,
  renderSeparator: _propTypes2['default'].func,
  renderRow: _propTypes2['default'].func.isRequired,
  initialListSize: _propTypes2['default'].number,
  onEndReached: _propTypes2['default'].func,
  onEndReachedThreshold: _propTypes2['default'].number,
  pageSize: _propTypes2['default'].number,
  renderFooter: _propTypes2['default'].func,
  renderHeader: _propTypes2['default'].func,
  renderSectionHeader: _propTypes2['default'].func,
  renderScrollComponent: _propTypes2['default'].func,
  scrollRenderAheadDistance: _propTypes2['default'].number,
  onChangeVisibleRows: _propTypes2['default'].func,
  scrollEventThrottle: _propTypes2['default'].number,
  // another added
  renderBodyComponent: _propTypes2['default'].func,
  renderSectionBodyWrapper: _propTypes2['default'].func,
  sectionBodyClassName: _propTypes2['default'].string,
  useZscroller: _propTypes2['default'].bool, // for web
  useBodyScroll: _propTypes2['default'].bool, // for web
  stickyHeader: _propTypes2['default'].bool, // for web
  stickyProps: _propTypes2['default'].object, // https://github.com/captivationsoftware/react-sticky/blob/master/README.md#sticky--props
  stickyContainerProps: _propTypes2['default'].object
});
ListView.defaultProps = {
  initialListSize: DEFAULT_INITIAL_ROWS,
  pageSize: DEFAULT_PAGE_SIZE,
  renderScrollComponent: function renderScrollComponent(props) {
    return _react2['default'].createElement(_ScrollView2['default'], props);
  },
  renderBodyComponent: function renderBodyComponent() {
    return _react2['default'].createElement('div', null);
  },
  renderSectionBodyWrapper: function renderSectionBodyWrapper(sectionID) {
    return _react2['default'].createElement('div', { key: sectionID });
  },
  sectionBodyClassName: 'list-view-section-body',
  scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
  onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
  scrollEventThrottle: DEFAULT_SCROLL_CALLBACK_THROTTLE,
  stickyProps: {},
  stickyContainerProps: {},
  scrollerOptions: {}
};

var _initialiseProps = function _initialiseProps() {
  var _this5 = this;

  this.state = {
    curRenderedRowsCount: this.props.initialListSize,
    highlightedRow: {} };

  this.getMetrics = function () {
    return {
      contentLength: _this5.scrollProperties.contentLength,
      totalRows: _this5.props.dataSource.getRowCount(),
      renderedRows: _this5.state.curRenderedRowsCount,
      visibleRows: Object.keys(_this5._visibleRows).length
    };
  };

  this.scrollTo = function () {
    var _refs$SCROLLVIEW_REF;

    _this5.refs[SCROLLVIEW_REF] && _this5.refs[SCROLLVIEW_REF].scrollTo && (_refs$SCROLLVIEW_REF = _this5.refs[SCROLLVIEW_REF]).scrollTo.apply(_refs$SCROLLVIEW_REF, arguments);
  };

  this.getInnerViewNode = function () {
    // console.log(this.refs[SCROLLVIEW_REF]);
    return _this5.refs[SCROLLVIEW_REF].getInnerViewNode();
  };

  this.onRowHighlighted = function (sectionID, rowID) {
    _this5.setState({ highlightedRow: { sectionID: sectionID, rowID: rowID } });
  };

  this.stickyRefs = {};

  this._onContentSizeChange = function (width, height) {
    var contentLength = !_this5.props.horizontal ? height : width;
    if (contentLength !== _this5.scrollProperties.contentLength) {
      _this5.scrollProperties.contentLength = contentLength;
      _this5._renderMoreRowsIfNeeded();
    }
    _this5.props.onContentSizeChange && _this5.props.onContentSizeChange(width, height);
  };

  this._onLayout = function (event) {
    var _event$nativeEvent$la = event.nativeEvent.layout,
        width = _event$nativeEvent$la.width,
        height = _event$nativeEvent$la.height;

    var visibleLength = !_this5.props.horizontal ? height : width;
    if (visibleLength !== _this5.scrollProperties.visibleLength) {
      _this5.scrollProperties.visibleLength = visibleLength;
      _this5._renderMoreRowsIfNeeded();
    }
    _this5.props.onLayout && _this5.props.onLayout(event);
  };

  this._maybeCallOnEndReached = function (event) {
    // console.log(this.scrollProperties, this._getDistanceFromEnd(this.scrollProperties));
    if (_this5.props.onEndReached && _this5.scrollProperties.contentLength !== _this5._sentEndForContentLength && _this5._getDistanceFromEnd(_this5.scrollProperties) < _this5.props.onEndReachedThreshold && _this5.state.curRenderedRowsCount === _this5.props.dataSource.getRowCount()) {
      _this5._sentEndForContentLength = _this5.scrollProperties.contentLength;
      _this5.props.onEndReached(event);
      return true;
    }
    return false;
  };

  this._renderMoreRowsIfNeeded = function () {
    if (_this5.scrollProperties.contentLength === null || _this5.scrollProperties.visibleLength === null || _this5.state.curRenderedRowsCount === _this5.props.dataSource.getRowCount()) {
      _this5._maybeCallOnEndReached();
      return;
    }

    var distanceFromEnd = _this5._getDistanceFromEnd(_this5.scrollProperties);
    // console.log(distanceFromEnd, this.props.scrollRenderAheadDistance);
    if (distanceFromEnd < _this5.props.scrollRenderAheadDistance) {
      _this5._pageInNewRows();
    }
  };

  this._pageInNewRows = function () {
    _this5.setState(function (state, props) {
      var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.dataSource.getRowCount());
      _this5._prevRenderedRowsCount = state.curRenderedRowsCount;
      return {
        curRenderedRowsCount: rowsToRender
      };
    }, function () {
      _this5._prevRenderedRowsCount = _this5.state.curRenderedRowsCount;
    });
  };

  this._getDistanceFromEnd = function (scrollProperties) {
    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
  };

  this._onScroll = function (e) {
    var isVertical = !_this5.props.horizontal;
    var ev = e;
    // when the ListView is destroyed,
    // but also will trigger scroll event after `scrollEventThrottle`
    if (!_this5.refs[SCROLLVIEW_REF]) {
      return;
    }
    var target = _reactDom2['default'].findDOMNode(_this5.refs[SCROLLVIEW_REF]);
    if (_this5.props.stickyHeader || _this5.props.useBodyScroll) {
      _this5.scrollProperties.visibleLength = window[isVertical ? 'innerHeight' : 'innerWidth'];
      _this5.scrollProperties.contentLength = target[isVertical ? 'scrollHeight' : 'scrollWidth'];
      // In chrome61 `document.body.scrollTop` is invalid,
      // and add new `document.scrollingElement`(chrome61, iOS support).
      // In old-android-browser and iOS `document.documentElement.scrollTop` is invalid.
      var scrollNode = document.scrollingElement ? document.scrollingElement : document.body;
      _this5.scrollProperties.offset = scrollNode[isVertical ? 'scrollTop' : 'scrollLeft'];
    } else if (_this5.props.useZscroller) {
      var domScroller = _this5.refs[SCROLLVIEW_REF].domScroller;
      ev = domScroller;
      _this5.scrollProperties.visibleLength = domScroller.container[isVertical ? 'clientHeight' : 'clientWidth'];
      _this5.scrollProperties.contentLength = domScroller.content[isVertical ? 'offsetHeight' : 'offsetWidth'];
      _this5.scrollProperties.offset = domScroller.scroller.getValues()[isVertical ? 'top' : 'left'];
      // console.log(this.scrollProperties, domScroller.scroller.getScrollMax())
    } else {
      _this5.scrollProperties.visibleLength = target[isVertical ? 'offsetHeight' : 'offsetWidth'];
      _this5.scrollProperties.contentLength = target[isVertical ? 'scrollHeight' : 'scrollWidth'];
      _this5.scrollProperties.offset = target[isVertical ? 'scrollTop' : 'scrollLeft'];
    }

    if (!_this5._maybeCallOnEndReached(ev)) {
      _this5._renderMoreRowsIfNeeded();
    }

    if (_this5.props.onEndReached && _this5._getDistanceFromEnd(_this5.scrollProperties) > _this5.props.onEndReachedThreshold) {
      // Scrolled out of the end zone, so it should be able to trigger again.
      _this5._sentEndForContentLength = null;
    }

    _this5.props.onScroll && _this5.props.onScroll(ev);
  };

  this.bindEvt = function () {
    var ele = _this5.getEle();
    ele.addEventListener('touchstart', _this5.onPullUpStart);
    ele.addEventListener('touchmove', _this5.onPullUpMove);
    ele.addEventListener('touchend', _this5.onPullUpEnd);
    ele.addEventListener('touchcancel', _this5.onPullUpEnd);
  };

  this.unBindEvt = function () {
    var ele = _this5.getEle();
    ele.removeEventListener('touchstart', _this5.onPullUpStart);
    ele.removeEventListener('touchmove', _this5.onPullUpMove);
    ele.removeEventListener('touchend', _this5.onPullUpEnd);
    ele.removeEventListener('touchcancel', _this5.onPullUpEnd);
  };

  this.getEle = function () {
    var _props2 = _this5.props,
        stickyHeader = _props2.stickyHeader,
        useBodyScroll = _props2.useBodyScroll;

    var ele = void 0;
    if (stickyHeader || useBodyScroll) {
      ele = document.body;
    } else {
      ele = _reactDom2['default'].findDOMNode(_this5.refs.listviewscroll.refs.ScrollView);
    }
    return ele;
  };

  this.onPullUpStart = function (e) {
    _this5._pullUpStartPageY = e.touches[0].screenY;
    _this5._isPullUp = false;
    _this5._pullUpEle = _this5.getEle();
  };

  this.onPullUpMove = function (e) {
    // 使用 pageY 对比有问题
    if (e.touches[0].screenY < _this5._pullUpStartPageY && _this5._reachBottom()) {
      // console.log('滚动条到了底部，pull up');
      _this5._isPullUp = true;
    }
  };

  this.onPullUpEnd = function (e) {
    if (_this5._isPullUp && _this5.props.onEndReached) {
      // this.props.onEndReached(e);
      // https://github.com/react-component/m-list-view/pull/15/files
      // need update `this.scrollProperties` in order to render correctly
      _this5._onScroll(e);
    }
    _this5._isPullUp = false;
  };

  this._reachBottom = function () {
    var element = _this5._pullUpEle;
    if (element === document.body) {
      return element.scrollHeight - element.scrollTop === window.innerHeight;
    }
    return element.scrollHeight - element.scrollTop === element.clientHeight;
  };
};

exports['default'] = ListView;
module.exports = exports['default'];