'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _zscroller = require('zscroller');

var _zscroller2 = _interopRequireDefault(_zscroller);

var _PickerMixin = require('./PickerMixin');

var _PickerMixin2 = _interopRequireDefault(_PickerMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Picker = (0, _createReactClass2['default'])({
    mixins: [_PickerMixin2['default']],
    statics: {
        Item: function Item() {}
    },
    getDefaultProps: function getDefaultProps() {
        return {
            prefixCls: 'rmc-picker'
        };
    },
    getInitialState: function getInitialState() {
        var selectedValueState = void 0;
        var _props = this.props,
            selectedValue = _props.selectedValue,
            defaultSelectedValue = _props.defaultSelectedValue;

        if (selectedValue !== undefined) {
            selectedValueState = selectedValue;
        } else if (defaultSelectedValue !== undefined) {
            selectedValueState = defaultSelectedValue;
        } else {
            var children = _react2['default'].Children.toArray(this.props.children);
            selectedValueState = children && children[0] && children[0].props.value;
        }
        return {
            selectedValue: selectedValueState
        };
    },
    componentDidMount: function componentDidMount() {
        var _refs = this.refs,
            content = _refs.content,
            indicator = _refs.indicator,
            mask = _refs.mask,
            root = _refs.root;

        var rootHeight = root.getBoundingClientRect().height;
        // https://github.com/react-component/m-picker/issues/18
        var itemHeight = this.itemHeight = indicator.getBoundingClientRect().height;
        var num = Math.floor(rootHeight / itemHeight);
        if (num % 2 === 0) {
            num--;
        }
        num--;
        num /= 2;
        content.style.padding = itemHeight * num + 'px 0';
        indicator.style.top = itemHeight * num + 'px';
        mask.style.backgroundSize = '100% ' + itemHeight * num + 'px';
        this.zscroller = new _zscroller2['default'](content, {
            scrollingX: false,
            snapping: true,
            locking: false,
            penetrationDeceleration: .1,
            minVelocityToKeepDecelerating: 0.5,
            scrollingComplete: this.scrollingComplete
        });
        this.zscroller.setDisabled(this.props.disabled);
        this.zscroller.scroller.setSnapSize(0, itemHeight);
        this.select(this.state.selectedValue);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('selectedValue' in nextProps) {
            this.setState({
                selectedValue: nextProps.selectedValue
            });
        }
        this.zscroller.setDisabled(nextProps.disabled);
    },
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return this.state.selectedValue !== nextState.selectedValue || this.props.children !== nextProps.children;
    },
    componentDidUpdate: function componentDidUpdate() {
        this.zscroller.reflow();
        this.select(this.state.selectedValue);
    },
    componentWillUnmount: function componentWillUnmount() {
        this.zscroller.destroy();
    },
    scrollTo: function scrollTo(top) {
        this.zscroller.scroller.scrollTo(0, top);
    },
    fireValueChange: function fireValueChange(selectedValue) {
        if (selectedValue !== this.state.selectedValue) {
            if (!('selectedValue' in this.props)) {
                this.setState({
                    selectedValue: selectedValue
                });
            }
            if (this.props.onValueChange) {
                this.props.onValueChange(selectedValue);
            }
        }
    },
    scrollingComplete: function scrollingComplete() {
        var _zscroller$scroller$g = this.zscroller.scroller.getValues(),
            top = _zscroller$scroller$g.top;

        if (top >= 0) {
            this.doScrollingComplete(top);
        }
    },
    getValue: function getValue() {
        if ('selectedValue' in this.props) {
            return this.props.selectedValue;
        }
        var children = _react2['default'].Children.toArray(this.props.children);
        return children && children[0] && children[0].props.value;
    },
    render: function render() {
        var _pickerCls;

        var props = this.props;
        var prefixCls = props.prefixCls,
            itemStyle = props.itemStyle,
            indicatorStyle = props.indicatorStyle,
            _props$indicatorClass = props.indicatorClassName,
            indicatorClassName = _props$indicatorClass === undefined ? '' : _props$indicatorClass,
            children = props.children;
        var selectedValue = this.state.selectedValue;

        var itemClassName = prefixCls + '-item';
        var selectedItemClassName = itemClassName + ' ' + prefixCls + '-item-selected';
        var map = function map(item) {
            var _item$props = item.props,
                _item$props$className = _item$props.className,
                className = _item$props$className === undefined ? '' : _item$props$className,
                style = _item$props.style,
                value = _item$props.value;

            return _react2['default'].createElement(
                'div',
                { style: (0, _extends3['default'])({}, itemStyle, style), className: (selectedValue === value ? selectedItemClassName : itemClassName) + ' ' + className, key: value },
                item.children || item.props.children
            );
        };
        // compatibility for preact
        var items = _react2['default'].Children ? _react2['default'].Children.map(children, map) : [].concat(children).map(map);
        var pickerCls = (_pickerCls = {}, (0, _defineProperty3['default'])(_pickerCls, props.className, !!props.className), (0, _defineProperty3['default'])(_pickerCls, prefixCls, true), _pickerCls);
        return _react2['default'].createElement(
            'div',
            { className: (0, _classnames2['default'])(pickerCls), ref: 'root', style: this.props.style },
            _react2['default'].createElement('div', { className: prefixCls + '-mask', ref: 'mask' }),
            _react2['default'].createElement('div', { className: prefixCls + '-indicator ' + indicatorClassName, ref: 'indicator', style: indicatorStyle }),
            _react2['default'].createElement(
                'div',
                { className: prefixCls + '-content', ref: 'content' },
                items
            )
        );
    }
});
exports['default'] = Picker;
module.exports = exports['default'];